name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  libmamba_static:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./libmamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
      - name: build libmamba-static
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          mkdir build
          cd build
          cmake .. -DBUILD_LIBMAMBA=ON \
                   -DBUILD_STATIC=ON \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                   -GNinja
          ninja
      - name: build cache statistics
        run: sccache --show-stats
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  libmamba_cpp_tests:
    needs: [libmamba_static]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./libmamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static-${{ matrix.os }}
      - name: build and run libmamba C++ tests
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          mkdir build
          cd build
          cmake .. -DBUILD_LIBMAMBA=ON \
                   -DBUILD_SHARED=ON \
                   -DBUILD_LIBMAMBA_TESTS=ON \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                   -GNinja
          ninja testing_libmamba_lock
          ninja test
      - name: build cache statistics
        run: sccache --show-stats
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  umamba_tests:
    needs: [libmamba_static]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./micromamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static-${{ matrix.os }}
      - name: build micromamba
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          mkdir build
          cd build
          cmake .. -DBUILD_MICROMAMBA=ON \
                   -DBUILD_LIBMAMBA=ON \
                   -DBUILD_SHARED=ON \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                   -GNinja
          ninja
      - name: build cache statistics
        run: sccache --show-stats
      - name: install zsh, xonsh, fish and tcsh in linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash -l -eo pipefail {0}
        run: |
          sudo apt-get install zsh xonsh fish tcsh -y
      - name: install xonsh and fish in mac
        if: matrix.os == 'macos-latest'
        shell: bash -l -eo pipefail {0}
        run: |
          brew install fish xonsh
      - name: micromamba python based tests
        shell: bash -l -eo pipefail {0}
        run: |
          export TEST_MAMBA_EXE=$(pwd)/build/micromamba/micromamba
          micromamba activate build_env
          pytest -v --capture=tee-sys micromamba/tests/
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  mamba_python_tests:
    needs: [libmamba_static]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python_version: ["3.8"]

    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./mamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
          extra-specs: |
            conda-build
            python=${{ matrix.python_version }}
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static-${{ matrix.os }}
      - name: run conda init
        shell: bash -l {0}
        run: conda init
      - name: build libmamba Python bindings
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
                   -DBUILD_LIBMAMBAPY=ON \
                   -DBUILD_LIBMAMBA=ON \
                   -DBUILD_SHARED=ON \
                   -DBUILD_MAMBA_PACKAGE=ON \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                   -GNinja
          ninja
          ninja install
      - name: install libmambapy
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          pip install -e ./libmambapy/ --no-deps
      - name: check libmambapy stubs
        shell: bash -l {0}
        run: |
          pybind11-stubgen libmambapy.bindings
          python compare_stubs.py libmambapy/libmambapy/__init__.pyi stubs/libmambapy/bindings-stubs/__init__.pyi
      - name: build cache statistics
        run: sccache --show-stats
      - name: install mamba
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          pip install ./mamba[test] --no-deps
      - name: run mamba tests suite
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          pytest -v --capture=tee-sys mamba/tests
      - name: run mamba create/update tests
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          mamba create -n test_env xtensor -c conda-forge -y
          mamba env create -f mamba/tests/test_env.yml
          mamba env update -f mamba/tests/update_env.yml
      - name: run mamba local channel test
        shell: bash -l {0}
        run: |
          micromamba activate build_env
          if [ "$RUNNER_OS" == "Linux" ]; then
            mkdir -p $CONDA_PREFIX/conda-bld/linux-64
            wget -P $CONDA_PREFIX/conda-bld/linux-64 https://anaconda.org/conda-forge/xtensor/0.21.8/download/linux-64/xtensor-0.21.8-hc9558a2_0.tar.bz2
            wget -P $CONDA_PREFIX/conda-bld/linux-64 https://anaconda.org/conda-forge/xtl/0.6.21/download/linux-64/xtl-0.6.21-h0efe328_0.tar.bz2
          else
            mkdir -p $CONDA_PREFIX/conda-bld/osx-64
            wget -P $CONDA_PREFIX/conda-bld/osx-64 https://anaconda.org/conda-forge/xtensor/0.21.8/download/osx-64/xtensor-0.21.8-h879752b_0.tar.bz2
            wget -P $CONDA_PREFIX/conda-bld/osx-64 https://anaconda.org/conda-forge/xtl/0.6.21/download/osx-64/xtl-0.6.21-h6516342_0.tar.bz2
          fi
          conda index $CONDA_PREFIX/conda-bld
          mamba create -n l_o_cal_test xtensor -c local -c conda-forge -y

          conda list -n l_o_cal_test
          conda list -n l_o_cal_test | tail -n +3 > list.txt
          if [ "$(grep -c "local" list.txt)" -ne 2 ]; then
            exit 1
          fi
      - name: Run server auth tests
        shell: bash -l {0} -euo pipefail -x
        run: |
          micromamba activate build_env
          cd mamba/tests

          if [[ "$(uname -s)" == "Linux" ]]; then
            ./generate_gpg_keys.sh
            pip install securesystemslib
          fi
          pip install git+https://github.com/conda/conda-content-trust.git@main

          ./testserver.sh
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  libmamba_static_win:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]

    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./libmamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
      - name: build libmamba-static
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          if %errorlevel% neq 0 exit /b %errorlevel%
          mkdir build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cd build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cmake .. -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library ^
                   -DBUILD_LIBMAMBA=ON ^
                   -DBUILD_STATIC=ON ^
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
                   -GNinja
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja
      - name: build cache statistics
        run: sccache --show-stats
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  mamba_python_tests_win:
    needs: [libmamba_static_win]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ["3.7"]

    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./mamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
          extra-specs: |
            conda-build
            curl
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static_win-${{ matrix.os }}
      - name: run conda init
        shell: bash -l {0}
        run: conda init
      - name: build libmamba Python bindings
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          if %errorlevel% neq 0 exit /b %errorlevel%
          mkdir build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cd build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cmake .. -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library ^
                   -DBUILD_LIBMAMBAPY=ON ^
                   -DBUILD_LIBMAMBA=ON ^
                   -DBUILD_SHARED=ON ^
                   -DBUILD_MAMBA_PACKAGE=ON ^
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
                   -GNinja
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja install
      - name: install libmambapy
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          pip install -e .\libmambapy\ --no-deps
      - name: build cache statistics
        run: sccache --show-stats
      - name: install mamba
        shell: bash -l {0}
        run: |
          python --version
          pip install ./mamba[test] --no-deps
      - name: run mamba tests suite
        shell: bash -l {0}
        run: pytest -v --capture=tee-sys mamba/tests
      - name: Run create command
        shell: bash -l {0}
        run: mamba create -n test_env xtensor -c conda-forge -y
      - name: Run env create command
        shell: bash -l {0}
        run: mamba env create -f mamba/tests/test_env.yml
      - name: Run env update command
        shell: bash -l {0}
        run: mamba env update -f mamba/tests/update_env.yml
      - name: Run local channel checks
        shell: bash -l {0}
        run: |
          mkdir -p $CONDA_PREFIX/conda-bld/win-64
          echo $PATH
          micromamba list
          micromamba info
          curl --version
          curl https://anaconda.org/conda-forge/xtensor/0.21.7/download/win-64/xtensor-0.21.7-h7ef1ec2_0.tar.bz2 -L -o $CONDA_PREFIX/conda-bld/win-64/xtensor-0.21.7-h7ef1ec2_0.tar.bz2
          curl https://anaconda.org/conda-forge/xtl/0.6.21/download/win-64/xtl-0.6.21-h5362a0b_0.tar.bz2 -L -o $CONDA_PREFIX/conda-bld/win-64/xtl-0.6.21-h5362a0b_0.tar.bz2
          conda index $CONDA_PREFIX/conda-bld
          mamba create -n l_o_cal_test xtensor -c local -c conda-forge -y

          conda list -n l_o_cal_test
          # cut first couple of lines to remove prefix path
          conda list -n l_o_cal_test | tail -n +3 > list.txt
          if [ "$(grep -c "local" list.txt)" -ne 2 ]; then
            exit 1
          fi
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  libmamba_cpp_tests_win:
    needs: [libmamba_static_win]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ["3.7"]

    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./libmamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static_win-${{ matrix.os }}
      - name: build and run libmamba C++ tests
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          if %errorlevel% neq 0 exit /b %errorlevel%
          mkdir build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cd build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cmake .. -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library ^
                   -DBUILD_LIBMAMBA_TESTS=ON ^
                   -DBUILD_LIBMAMBA=ON ^
                   -DBUILD_SHARED=ON ^
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
                   -GNinja
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja install
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja test
      - name: build cache statistics
        run: sccache --show-stats
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  umamba_tests_win:
    needs: [libmamba_static_win]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ["3.7"]

    steps:
      - uses: actions/checkout@v3
      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./micromamba/environment-dev.yml
          environment-name: build_env
          cache-env: true
      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}
          restore-keys: |
            libmamba_static_win-${{ matrix.os }}
      - name: build micromamba
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          if %errorlevel% neq 0 exit /b %errorlevel%
          mkdir build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cd build
          if %errorlevel% neq 0 exit /b %errorlevel%
          cmake .. -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library ^
                   -DBUILD_MICROMAMBA=ON ^
                   -DMICROMAMBA_LINKAGE=STATIC ^
                   -DBUILD_LIBMAMBA=ON ^
                   -DBUILD_STATIC=ON ^
                   -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
                   -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
                   -GNinja
          if %errorlevel% neq 0 exit /b %errorlevel%
          ninja install
      - name: check that micromamba runs
        shell: cmd /C call {0}
        run: |
          call micromamba activate build_env
          .\build\micromamba\micromamba.exe --help
      - name: build cache statistics
        run: sccache --show-stats
      - name: tar micromamba artifact
        run: tar -cvf umamba.tar build/micromamba/micromamba.exe
      - uses: actions/upload-artifact@v3
        with:
          name: _internal_micromamba_binary
          path: umamba.tar
      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs

  umamba_tests_win_cmd:
    needs: [umamba_tests_win]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ["3.7"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: _internal_micromamba_binary

      - name: untar micromamba artifact
        shell: bash -l -eo pipefail {0}
        run: |
          tar -xvf umamba.tar

      - name: create build environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ./micromamba/environment-dev.yml
          environment-name: build_env
          extra-specs: menuinst

      - name: micromamba python based tests with pwsh
        shell: powershell
        run: |
          $env:PYTHONIOENCODING='UTF-8'
          $env:MAMBA_ROOT_PREFIX = Join-Path -Path $pwd -ChildPath 'mambaroot'
          $env:TEST_MAMBA_EXE = Join-Path -Path $pwd -ChildPath 'build\micromamba\micromamba.exe'
          $env:MAMBA_TEST_SHELL_TYPE='powershell'

          pytest -v --capture=tee-sys micromamba/tests/

      # - name: micromamba python based tests
      #   shell: cmd /C call {0}
      #   run: |
      #     if %errorlevel% neq 0 exit /b %errorlevel%
      #     set PYTHONIOENCODING=UTF-8
      #     if %errorlevel% neq 0 exit /b %errorlevel%
      #     set MAMBA_ROOT_PREFIX=%cd%\mambaroot
      #     if %errorlevel% neq 0 exit /b %errorlevel%
      #     set MAMBA_TEST_SHELL_TYPE=cmd.exe
      #     if %errorlevel% neq 0 exit /b %errorlevel%
      #     reg delete "HKEY_CURRENT_USER\Software\Microsoft\Command Processor" /v AutoRun /f
      #     if %errorlevel% neq 0 exit /b %errorlevel%
      #
      #     pytest -v --capture=tee-sys micromamba/tests/test_shell.py

      # - name: micromamba python based tests
      #   shell: bash -l -eo pipefail {0}
      #   run: |
      #     export PYTHONIOENCODING=UTF-8
      #     export MAMBA_ROOT_PREFIX=~/mambaroot
      #     export MAMBA_TEST_SHELL_TYPE=bash
      #
      #     pytest -v --capture=tee-sys micromamba/tests/test_shell.py

      - name: Cleanup
        shell: bash
        if: always()
        run: |
          # Do not cache temporary envs with 'cache-env: true'
          rm -rf ~/micromamba*/envs/*/envs
