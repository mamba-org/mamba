import libmambapy.bindings.solver
import libmambapy.bindings.specs
import os
from typing import Callable, ClassVar, Iterable, overload

class Database:
    def __init__(
        self,
        channel_params: libmambapy.bindings.specs.ChannelResolveParams,
        matchspec_parser: MatchSpecParser = ...,
    ) -> None: ...
    def add_repo_from_native_serialization(
        self,
        path: os.PathLike,
        expected: RepodataOrigin,
        channel_id: str,
        add_pip_as_python_dependency: PipAsPythonDependency = ...,
    ) -> RepoInfo: ...
    def add_repo_from_packages(
        self,
        packages: Iterable,
        name: str = ...,
        add_pip_as_python_dependency: PipAsPythonDependency = ...,
    ) -> RepoInfo: ...
    def add_repo_from_repodata_json(
        self,
        path: os.PathLike,
        url: str,
        channel_id: str,
        add_pip_as_python_dependency: PipAsPythonDependency = ...,
        package_types: PackageTypes = ...,
        verify_packages: VerifyPackages = ...,
        repodata_parser: RepodataParser = ...,
    ) -> RepoInfo: ...
    def installed_repo(self) -> RepoInfo | None: ...
    def native_serialize_repo(
        self, repo: RepoInfo, path: os.PathLike, metadata: RepodataOrigin
    ) -> RepoInfo: ...
    def package_count(self) -> int: ...
    def packages_depending_on(self, spec: libmambapy.bindings.specs.MatchSpec) -> list: ...
    def packages_in_repo(self, repo: RepoInfo) -> list: ...
    def packages_matching(self, spec: libmambapy.bindings.specs.MatchSpec) -> list: ...
    def remove_repo(self, repo: RepoInfo) -> None: ...
    def repo_count(self) -> int: ...
    def set_installed_repo(self, repo: RepoInfo) -> None: ...
    def set_logger(self, arg0: Callable[[LogLevel, str], None]) -> None: ...
    def set_repo_priority(self, repo: RepoInfo, priorities: Priorities) -> None: ...

class LogLevel:
    __members__: ClassVar[dict] = ...  # read-only
    Debug: ClassVar[LogLevel] = ...
    Error: ClassVar[LogLevel] = ...
    Fatal: ClassVar[LogLevel] = ...
    Warning: ClassVar[LogLevel] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class MatchSpecParser:
    __members__: ClassVar[dict] = ...  # read-only
    Libsolv: ClassVar[MatchSpecParser] = ...
    Mamba: ClassVar[MatchSpecParser] = ...
    Mixed: ClassVar[MatchSpecParser] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PackageTypes:
    __members__: ClassVar[dict] = ...  # read-only
    CondaAndTarBz2: ClassVar[PackageTypes] = ...
    CondaOnly: ClassVar[PackageTypes] = ...
    CondaOrElseTarBz2: ClassVar[PackageTypes] = ...
    TarBz2Only: ClassVar[PackageTypes] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PipAsPythonDependency:
    __members__: ClassVar[dict] = ...  # read-only
    No: ClassVar[PipAsPythonDependency] = ...
    Yes: ClassVar[PipAsPythonDependency] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Priorities:
    priority: int
    subpriority: int
    def __init__(self, priority: int = ..., subpriority: int = ...) -> None: ...
    def __copy__(self) -> Priorities: ...
    def __deepcopy__(self, memo: dict) -> Priorities: ...
    def __eq__(self, arg0: Priorities) -> bool: ...
    def __ne__(self, arg0: Priorities) -> bool: ...

class RepoInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def package_count(self) -> int: ...
    def __copy__(self) -> RepoInfo: ...
    def __deepcopy__(self, memo: dict) -> RepoInfo: ...
    def __eq__(self, arg0: RepoInfo) -> bool: ...
    def __ne__(self, arg0: RepoInfo) -> bool: ...
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def priority(self) -> Priorities: ...

class RepodataOrigin:
    etag: str
    mod: str
    url: str
    def __init__(self, url: str = ..., etag: str = ..., mod: str = ...) -> None: ...
    def __copy__(self) -> RepodataOrigin: ...
    def __deepcopy__(self, memo: dict) -> RepodataOrigin: ...
    def __eq__(self, arg0: RepodataOrigin) -> bool: ...
    def __ne__(self, arg0: RepodataOrigin) -> bool: ...

class RepodataParser:
    __members__: ClassVar[dict] = ...  # read-only
    Libsolv: ClassVar[RepodataParser] = ...
    Mamba: ClassVar[RepodataParser] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Solver:
    def __init__(self) -> None: ...
    def add_global_job(self, *args, **kwargs) -> None: ...
    def add_jobs(self, *args, **kwargs) -> None: ...
    def add_pin(self, *args, **kwargs) -> None: ...
    def is_solved(self, *args, **kwargs) -> None: ...
    def must_solve(self, *args, **kwargs) -> None: ...
    def set_flags(self, *args, **kwargs) -> None: ...
    def set_libsolv_flags(self, *args, **kwargs) -> None: ...
    def set_postsolve_flags(self, *args, **kwargs) -> None: ...
    def solve(
        self,
        database: Database,
        request: libmambapy.bindings.solver.Request,
        matchspec_parser: MatchSpecParser = ...,
    ) -> libmambapy.bindings.solver.Solution | UnSolvable: ...
    def try_solve(self, *args, **kwargs) -> None: ...

class UnSolvable:
    def __init__(self, *args, **kwargs) -> None: ...
    def all_problems_to_str(self, database: Database) -> str: ...
    def explain_problems(
        self, database: Database, format: libmambapy.bindings.solver.ProblemsMessageFormat
    ) -> str: ...
    def problems(self, database: Database) -> list[str]: ...
    def problems_graph(self, database: Database) -> libmambapy.bindings.solver.ProblemsGraph: ...
    def problems_to_str(self, database: Database) -> str: ...

class VerifyPackages:
    __members__: ClassVar[dict] = ...  # read-only
    No: ClassVar[VerifyPackages] = ...
    Yes: ClassVar[VerifyPackages] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: bool) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
