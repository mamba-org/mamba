from typing import ClassVar, overload

class TextEmphasis:
    __members__: ClassVar[dict] = ...  # read-only
    Blink: ClassVar[TextEmphasis] = ...
    Bold: ClassVar[TextEmphasis] = ...
    Conceal: ClassVar[TextEmphasis] = ...
    Faint: ClassVar[TextEmphasis] = ...
    Italic: ClassVar[TextEmphasis] = ...
    Reverse: ClassVar[TextEmphasis] = ...
    Strikethrough: ClassVar[TextEmphasis] = ...
    Underline: ClassVar[TextEmphasis] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TextRGBColor:
    blue: int
    green: int
    red: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, red: int = ..., green: int = ..., blue: int = ...) -> None: ...
    def __copy__(self) -> TextRGBColor: ...
    def __deepcopy__(self, memo: dict) -> TextRGBColor: ...

class TextStyle:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        foreground: TextTerminalColor | TextRGBColor | None = ...,
        background: TextTerminalColor | TextRGBColor | None = ...,
        emphasis: TextEmphasis | None = ...,
    ) -> None: ...
    def __copy__(self) -> TextStyle: ...
    def __deepcopy__(self, memo: dict) -> TextStyle: ...
    @property
    def background(self) -> TextTerminalColor | TextRGBColor | None: ...
    @property
    def emphasis(self) -> TextEmphasis | None: ...
    @property
    def foreground(self) -> TextTerminalColor | TextRGBColor | None: ...

class TextTerminalColor:
    __members__: ClassVar[dict] = ...  # read-only
    Black: ClassVar[TextTerminalColor] = ...
    Blue: ClassVar[TextTerminalColor] = ...
    BrightBlack: ClassVar[TextTerminalColor] = ...
    BrightBlue: ClassVar[TextTerminalColor] = ...
    BrightCyan: ClassVar[TextTerminalColor] = ...
    BrightGreen: ClassVar[TextTerminalColor] = ...
    BrightMagenta: ClassVar[TextTerminalColor] = ...
    BrightRed: ClassVar[TextTerminalColor] = ...
    BrightWhite: ClassVar[TextTerminalColor] = ...
    BrightYellow: ClassVar[TextTerminalColor] = ...
    Cyan: ClassVar[TextTerminalColor] = ...
    Green: ClassVar[TextTerminalColor] = ...
    Magenta: ClassVar[TextTerminalColor] = ...
    Red: ClassVar[TextTerminalColor] = ...
    White: ClassVar[TextTerminalColor] = ...
    Yellow: ClassVar[TextTerminalColor] = ...
    __entries: ClassVar[dict] = ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
